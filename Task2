1. Create a POST API for adding Products with values:
title , price ,description ,category ,image,rating,
discount,offerprice,reviews

app.post('/products', async (req, res) => {
    try {
        const product = new Product(req.body);
        await product.save();
        res.status(201).send(product);
    } catch (err) {
        res.status(400).send(err);
    }
});


2. Create a GET API to retrieve all product Information

app.get('/products', async (req, res) => {
    try {
        const products = await Product.find();
        res.status(200).send(products);
    } catch (err) {
        res.status(500).send(err);
    }
});

Create a Signup API 
Name, Father Name , DOB , Branch ,Roll No
Section , Address , Mobile No , password

app.post('/signup', async (req, res) => {
    try {
        const { password, ...userData } = req.body;
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = new User({ ...userData, password: hashedPassword });
        await user.save();
        res.status(201).send({ message: 'User created successfully' });
    } catch (err) {
        res.status(400).send(err);
    }
});


4.Create Sigin API to login using Roll no and Password

app.post('/signin', async (req, res) => {
    try {
        const { rollNo, password } = req.body;
        const user = await User.findOne({ rollNo });
        if (!user) return res.status(404).send({ message: 'User not found' });

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) return res.status(400).send({ message: 'Invalid credentials' });

        const token = jwt.sign({ rollNo: user.rollNo }, 'secretkey', { expiresIn: '1h' });
        res.send({ message: 'Login successful', token });
    } catch (err) {
        res.status(500).send(err);
    }
});



